
metavar var, x ::=   {{ com  term variable }} 
{{ isa string}} {{ coq nat}} {{ hol string}} {{ lem string }} {{ coq-equality }}
{{ ocaml int}} {{ lex alphanum}} {{ tex \mathit{[[var]]} }}


metavar label, l, k ::=
 {{ isa string }} {{ coq nat }} {{ hol string }} {{ lex alphanum }}  {{ tex \mathit{[[label]]} }} 
 {{ com  field label  }}  {{ isavar ''[[label]]'' }} {{ holvar "[[label]]" }}
 {{ ocamlvar "[[label]]" }}

indexvar index, i, j, n, m  ::= {{ isa nat }} {{ coq nat }} {{ hol num }} {{ lex numeral }}
  {{ com indices }}



grammar
t :: Tm ::=                                       {{ com terms: }}
| ( t )                      :: M :: Paren      {{ ich [[t]] }}
% | let p = t in t'            ::   :: Let       (+ bind b(p) in t' +)
% | x                          ::   :: Var       {{ com variable }}
| 0                          ::   :: Zero       {{ com constant zero }}
| S t                        ::   :: Succ       {{ com successor }}
| P t                        ::   :: Pred       {{ com predeccessor }}
| iszero t                   ::   :: Iszero     {{ com zero test }}
| iseven t                   ::   :: Iseven     {{ com even test }}
| T                          ::   :: True       {{ com constant zero }}
| F                          ::   :: False      {{ com constant zero }}
| t1 ? t2 : t3               ::   :: Cond       {{ com conditional }}
| not t                      ::   :: Not        {{ com not }}
| ( t1 , .. , tn )                ::   :: Tuple
| t . i                           ::   :: TupleGet                            
| { l1 = t1 ,  .. , ln = tn }     ::   :: Record  
| t [ l ]                         ::   :: RecordGet

% p :: 'P_' ::=                                              
%   | x                                 :: :: ident  (+ b = x  +)
%   | { l1 = p1 , .. , ln = pn }        :: :: tuple  (+ b = b(p1 .. pn) +) 
%   | ( p1 , .. , pn )                  :: :: record (+ b = b(p1 .. pn) +) 

nv :: NVa ::=                                     {{ com numerical values: }} 
  | 0                          ::   :: Zero       {{ com zero value }}
  | S nv                       ::   :: Succ       {{ com successor value }}

bv :: BVa ::=                                     {{ com boolean values: }} 
  | T                          ::   :: True       {{ com true value }}
  | F                          ::   :: False      {{ com false value }}

v :: Va ::=                                       {{ com values: }}
  | 0                          ::   :: Zero       
  | S nv                       ::   :: Succ       
  | T                          ::   :: True
  | F                          ::   :: False
  | ( v1 , .. , vn )           ::   :: TupVal
  | { l1 = v1 , .. , ln = vn } ::   :: RecVal
%   | nv
  

terminals :: terminals_ ::=
  | $                      ::   :: bigstep   {{ tex \Downarrow }} 
  | -->                    ::   :: smallstep {{ tex \longrightarrow }} 
  | ->                     ::   :: arrow     {{ tex \rightarrow }}
  | |-                     ::   :: turnstile {{ tex \vdash }}
  | <:                     ::   :: subtype   {{ tex <: }}
%   | |->                    ::   :: mapsto    {{ tex \mapsto }}
%   |  \                     ::   :: lambda    {{ tex  \lambda }}
%   |  =>                    ::   :: Arrow     {{ tex  \Rightarrow }}
%   | -->                    ::   :: red       {{ tex \longrightarrow }}
%   | Forall                 ::   :: forall    {{ tex \forall }}
%   | =                      ::   :: eq        {{ tex \!\! = \!\! }}
%   | :                      ::   :: colon     {{ tex \!\! : \!\! }}

subrules
nv <:: v
bv <:: v
v <:: t

defns 
Jop :: '' ::= 

defn 
t --> t' :: :: red :: E_ {{ com Evaluation }} by

t1 --> t1'
-------------------- :: Succ
S t1 --> S t1'

------------ :: PredZero
P 0 --> 0

--------------------- :: PredSucc
P S v1 --> v1 

t1 --> t1'
-------------------- :: Pred
P t1 --> P t1'


-------------------- :: CondTrue
T ? t2 : t3 --> t2

-------------------- :: CondFalse
F ? t2 : t3 --> t3


t1 --> t1'
-------------------- :: Cond
t1 ? t2 : t3 --> t1' ? t2 : t3

-------------------- :: NotTrue
not T --> F

-------------------- :: NotFalse
not F --> T

t1 --> t1'
-------------------- :: Not
not t1 --> not t1'



-------------------- :: IsEvenZero
iseven 0 --> T


-------------------- :: IsEvenSucc
iseven S nv --> not iseven nv


t1 --> t1'
-------------------- :: IsEven
iseven t --> iseven t1'

-------------------- :: TupleGet
(v1, .. , vn).i --> vi

t --> t'
-------------------- :: Tuple
(v1, .. , vm, t, t'1, .. , t'n) --> (v1, .. , vm, t', t'1, .. , t'n)

t --> t'
-------------------- :: Record
{l1 = v1, .. , lm = vm, l = t, l'1 = t'1, .. , l'n = t'n} --> {l1 = v1, .. , lm = vm, l = t', l'1 = t'1, .. , l'n = t'n}

-------------------- :: RecordGet
{l1=v1, .. , ln=vn}[lj] --> vj


defns 
Jop :: '' ::= 

defn 
t $ t' :: :: redB :: EB_ {{ com Big-Step Evaluation }} by

----- :: Val
v $ v

t1 $ nv1
---------- :: Succ
S t1 $ S nv1

t $ 0
---------- :: PredZero
P t $ 0

t $ S nv
---------- :: PredSucc
P t $ nv


t1 $ T
-------------------- :: CondTrue
t1 ? t2 : t3 $ t2

t1 $ F
-------------------- :: CondFalse
t1 ? t2 : t3 $ t3



t1 $ T
-------------------- :: NotTrue
not t1 $ F

t1 $ F
-------------------- :: NotFalse
not t1 $ T


t1 $ 0
-------------------- :: IsEvenZero
iseven t1 $ T


t1 $ S nv
-------------------- :: IsEvenSucc
iseven S nv $ F



t1 $ v1 .. tn $ vn
-------------------- :: Tuple
(t1, .. , tn) $ (v1, .. , vn)

t1 $ v1 .. tn $ vn
-------------------- :: Record
{l1=t1, .. , ln=tn} $ {l1=v1, .. , ln=vn}


t $ v
-------------------- :: TupleGet
t.i $ v.i

t $ v
-------------------- :: RecordGet
t[l] $ v[l]







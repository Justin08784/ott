grammar
Typ {{ hol Typ }} {{ tex \tau }}:: Ty ::=                     {{ com types: }}
  | N                          ::   :: Nat          {{ com type of natural numbers }}
  | B                          ::   :: Bool         {{ com type of booleans }}
  
defns
Jtype :: '' ::= 

defn
t : Typ :: :: typing :: T_ {{ com Typing }} by

------------------ :: Zero
0 : N

t1 : N
------------------ :: Succ
S t1 : N

t1 : N
------------------ :: Pred
P t1 : N





% grammar
% T {{ hol Typ }}, S, U :: Ty ::=                     {{ com types: }}
%   | Nat                          ::   :: Nat          {{ com type of natural numbers }}

% defns
% Jtype :: '' ::= 

% defn
% t : T :: :: typing :: T_ {{ com Typing }} by

% ------------------ :: Zero
% 0 : Nat

% G |- t1 : Nat
% ------------------ :: Succ
% G |- succ t1 : Nat

% G |- t1 : Nat
% ------------------ :: Pred
% G |- pred t1 : Nat

% G |- t1 : Nat
% --------------------- :: IsZero
% G |- iszero t1 : Bool










% grammar
% T {{ hol Typ }}, S, U :: Ty ::= {{ com types: }}
%   | N ::   :: Nat          {{ com type of natural numbers }}
%   | B ::   :: Bool         {{ com type of booleans }}

% % typexpr :: TE_ ::=
% %   | typvar                             ::   :: var
% %   | typexpr -> typexpr'                ::   :: arrow
% %   | typeconstr                         ::   :: constr0
% %   | '{' l1 : typexpr1 , .. , ln : typexprn '}'   ::   :: Rec                      
% %   | ( typexpr )                        :: M :: paren {{ isa [[typexpr]] }}

% % typscheme :: TS_ ::=  
% %   | ( typvar1 , .. , typvarn ) typexpr ::   :: ts  (+ bind typvar1 .. typvarn in typexpr +) 

% %   | generalise ( G , t )          :: M :: ts3 {{ isa (TS_ts (List.remdups (list_minus (ftv_typexpr [[t]]) (ftv_G [[G]]))) [[t]]) }}

% % terminals :: terminals_ ::=
% %   | -->                        ::   :: longrightarrow {{ tex \longrightarrow }}
% %   | ->                         ::   :: rightarrow     {{ tex \rightarrow }}
% %   | =>                         ::   :: Rightarrow     {{ tex \Rightarrow }}
% %   | \                          ::   :: lambda         {{ tex \lambda }}
% %   | |->                        ::   :: mapsto         {{ tex \mapsto }}
% %   | |-                         ::   :: vdash          {{ tex \vdash }}
% %   | empty                      ::   :: varnothing     {{ tex \varnothing }}
% %   | *                          ::   :: times          {{ tex \times }}
% %   | <:                         ::   :: subtype        {{ tex <: }}
% %   | <                          ::   :: langle         {{ tex \langle }}
% %   | >                          ::   :: rangle         {{ tex \rangle }}



% % formula :: 'formula_' ::=          
% %   | judgement           ::   :: judgement

% defns
% Jtype :: '' ::= 

% defn
% t : T :: :: typing :: T_ {{ com Typing }} by

% ------------------ :: T_Zero
% 0 : N

% t : N
% ------------------ :: T_Succ
% S t : N

% t : N
% ------------------ :: T_Pred
% P t : N


% t1 : N
% --------------------- :: T_IsZero
% t1 : B
